D G "__PCM__" 0 0 ""5.015""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""28-Mar-17""
D G "__TIME__" 0 0 ""22:29:06"" "Standard Header file for the PIC12F629 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 37 "int8" `53 
f B "set_tris_a" 1 37 "void(int8 value)" `52 
f B "get_tris_a" 1 38 "int8()" `54 
v L "value" 1 39 "int8" `56 
f B "output_a" 1 39 "void(int8 value)" `55 
f B "input_a" 1 40 "int8()" `57 
f B "input_change_a" 1 41 "int8()" `58 
v L "pin" 1 42 "int16" `60 
f B "input" 1 42 "int8(int16 pin)" `59 
v L "pin" 1 43 "int16" `62 
f B "input_state" 1 43 "int8(int16 pin)" `61 
v L "pin" 1 44 "int16" `64 
f B "output_low" 1 44 "void(int16 pin)" `63 
v L "pin" 1 45 "int16" `66 
f B "output_high" 1 45 "void(int16 pin)" `65 
v L "pin" 1 46 "int16" `68 
f B "output_toggle" 1 46 "void(int16 pin)" `67 
v L "pin" 1 47 "int16" `70 
v L "level" 1 47 "int8" `71 
f B "output_bit" 1 47 "void(int16 pin,int8 level)" `69 
v L "pin" 1 48 "int16" `73 
f B "output_float" 1 48 "void(int16 pin)" `72 
v L "pin" 1 49 "int16" `75 
f B "output_drive" 1 49 "void(int16 pin)" `74  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 53 "40"
d G "PIN_A1" 1 54 "41"
d G "PIN_A2" 1 55 "42"
d G "PIN_A3" 1 56 "43"
d G "PIN_A4" 1 57 "44"
d G "PIN_A5" 1 58 "45"
d G "FALSE" 1 61 "0"
d G "TRUE" 1 62 "1"
d G "BYTE" 1 64 "int8"
d G "BOOLEAN" 1 65 "int1"
d G "getc" 1 67 "getch"
d G "fgetc" 1 68 "getch"
d G "getchar" 1 69 "getch"
d G "putc" 1 70 "putchar"
d G "fputc" 1 71 "putchar"
d G "fgets" 1 72 "gets"
d G "fputs" 1 73 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 78 "int8()" `76 
f B "reset_cpu" 1 79 "void()" `77 
f B "sleep" 1 80 "void()" `78  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 82 "3"
d G "WDT_TIMEOUT" 1 83 "11"
d G "MCLR_FROM_SLEEP" 1 84 "19"
d G "MCLR_FROM_RUN" 1 85 "27"
d G "NORMAL_POWER_UP" 1 86 "25"
d G "BROWNOUT_RESTART" 1 87 "26"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 94 "int8" `80 
f B "setup_timer_0" 1 94 "void(int8 mode)" `79 
v L "value" 1 95 "int8" `82 
f B "set_timer0" 1 95 "void(int8 value)" `81 
f B "get_timer0" 1 96 "int8()" `83 
v L "mode" 1 97 "int8" `85 
v L "prescaler" 1 97 "int8" `86 
f B "setup_counters" 1 97 "void(int8 mode,int8 prescaler)" `84 
v L "value" 1 98 "int8" `88 
f B "set_rtcc" 1 98 "void(int8 value)" `87 
f B "get_rtcc" 1 99 "int8()" `89  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 101 "0"
d G "T0_EXT_L_TO_H" 1 102 "32"
d G "T0_EXT_H_TO_L" 1 103 "48"
d G "T0_DIV_1" 1 105 "8"
d G "T0_DIV_2" 1 106 "0"
d G "T0_DIV_4" 1 107 "1"
d G "T0_DIV_8" 1 108 "2"
d G "T0_DIV_16" 1 109 "3"
d G "T0_DIV_32" 1 110 "4"
d G "T0_DIV_64" 1 111 "5"
d G "T0_DIV_128" 1 112 "6"
d G "T0_DIV_256" 1 113 "7"
d G "T0_8_BIT" 1 116 "0"
d G "RTCC_INTERNAL" 1 118 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 119 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 120 "48"
d G "RTCC_DIV_1" 1 121 "8"
d G "RTCC_DIV_2" 1 122 "0"
d G "RTCC_DIV_4" 1 123 "1"
d G "RTCC_DIV_8" 1 124 "2"
d G "RTCC_DIV_16" 1 125 "3"
d G "RTCC_DIV_32" 1 126 "4"
d G "RTCC_DIV_64" 1 127 "5"
d G "RTCC_DIV_128" 1 128 "6"
d G "RTCC_DIV_256" 1 129 "7"
d G "RTCC_8_BIT" 1 130 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
v L "mode" 1 141 "int16" `91 
f B "setup_wdt" 1 141 "void(int16 mode)" `90 
f B "restart_wdt" 1 142 "void()" `92  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 145 "8"
d G "WDT_36MS" 1 146 "9"
d G "WDT_72MS" 1 147 "10"
d G "WDT_144MS" 1 148 "11"
d G "WDT_288MS" 1 149 "12"
d G "WDT_576MS" 1 150 "13"
d G "WDT_1152MS" 1 151 "14"
d G "WDT_2304MS" 1 152 "15"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 158 "int16" `94 
f B "setup_timer_1" 1 158 "void(int16 mode)" `93 
f B "get_timer1" 1 159 "int16()" `95 
v L "value" 1 160 "int16" `97 
f B "set_timer1" 1 160 "void(int16 value)" `96  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 163 "0"
d G "T1_INTERNAL" 1 164 "5"
d G "T1_EXTERNAL" 1 165 "7"
d G "T1_EXTERNAL_SYNC" 1 166 "3"
d G "T1_CLK_OUT" 1 168 "8"
d G "T1_DIV_BY_1" 1 170 "0"
d G "T1_DIV_BY_2" 1 171 "0x10"
d G "T1_DIV_BY_4" 1 172 "0x20"
d G "T1_DIV_BY_8" 1 173 "0x30"
d G "T1_GATE" 1 175 "0x40"
d G "T1_GATE_INVERTED" 1 176 "0xC0"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 181 "int32" `99 
f B "setup_comparator" 1 181 "void(int32 mode)" `98  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 183 "0x0ff07"
d G "NC_NC" 1 184 "0x0ff07"
d G "A0_A1" 1 185 "0x3ff02"
d G "A1_VR_OUT_ON_A2" 1 186 "0x6fb03"
d G "A1_VR" 1 187 "0x2ff04"
d G "A0_A1_OUT_ON_A2" 1 188 "0x3fb01"
d G "COMP_INVERT" 1 191 "0x10"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 197 "int8" `102 
f B "setup_vref" 1 197 "void(int8 mode)" `101  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 199 "0xa0"
d G "VREF_HIGH" 1 200 "0x80"
c L "setup_vref" 1 3 4 "FUNCTION"
v L "x" 1 207 "sint8" `104 
f B "abs" 1 207 "sint8(sint8 x)" `103 
v L "x" 1 208 "sint16" `106 
f G "abs" 1 208 "sint16(sint16 x)" `105 
v L "x" 1 209 "sint32" `108 
f G "abs" 1 209 "sint32(sint32 x)" `107 
v L "x" 1 210 "float" `110 
f G "abs" 1 210 "float(float x)" `109 
v L "??65535" 1 211 "int8" `112 
v L "??65535" 1 211 "int8" `113 
f B "_mul" 1 211 "int16(int8 ,int8 )" `111 
v L "??65535" 1 212 "sint8" `112 
v L "??65535" 1 212 "sint8" `116 
f G "_mul" 1 212 "sint16(sint8 ,sint8 )" `114 
v L "??65535" 1 213 "int16" `112 
v L "??65535" 1 213 "int16" `119 
f G "_mul" 1 213 "int32(int16 ,int16 )" `117 
v L "??65535" 1 214 "sint16" `112 
v L "??65535" 1 214 "sint16" `122 
f G "_mul" 1 214 "sint32(sint16 ,sint16 )" `120  "Memory Manipulation Prototypes:"
v L "bank" 1 217 "int8" `124 
v L "offset" 1 217 "int8" `125 
f B "read_bank" 1 217 "int8(int8 bank,int8 offset)" `123 
v L "bank" 1 218 "int8" `127 
v L "offset" 1 218 "int8" `128 
v L "value" 1 218 "int8" `129 
f B "write_bank" 1 218 "void(int8 bank,int8 offset,int8 value)" `126 
v L "dest" 1 219 "*int8" `131 
v L "src" 1 219 "*int8" `132 
f B "strcpy" 1 219 "void(*int8 dest,*int8 src)" `130 
v L "dest" 1 220 "*int8" `134 
v L "src" 1 220 "*int8" `135 
f B "strcopy" 1 220 "void(*int8 dest,*int8 src)" `133 
v L "destination" 1 221 "*int8" `137 
v L "value" 1 221 "int8" `138 
v L "num" 1 221 "int16" `139 
f B "memset" 1 221 "void(*int8 destination,int8 value,int16 num)" `136 
v L "destination" 1 222 "*int8" `141 
v L "source" 1 222 "*int8" `142 
v L "num" 1 222 "int16" `143 
f B "memcpy" 1 222 "void(*int8 destination,*int8 source,int16 num)" `140  "String Prototypes:"
v L "cvalue" 1 225 "int8" `145 
f B "toupper" 1 225 "int8(int8 cvalue)" `144 
v L "cvalue" 1 226 "int8" `147 
f B "tolower" 1 226 "int8(int8 cvalue)" `146 
v L "string" 1 227 "*int8" `149 
v L "cstring" 1 227 "*int8" `150 
f B "sprintf" 1 227 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `148  "Data Manipulators Prototypes:"
v L "address" 1 230 "*int8" `153 
v L "bytes" 1 230 "int8" `154 
v L "value" 1 230 "int8" `155 
f B "shift_left" 1 230 "int8(*int8 address,int8 bytes,int8 value)" `152 
v L "address" 1 231 "*int8" `157 
v L "bytes" 1 231 "int8" `158 
v L "value" 1 231 "int8" `159 
f B "shift_right" 1 231 "int8(*int8 address,int8 bytes,int8 value)" `156 
v L "address" 1 232 "*int8" `161 
v L "bytes" 1 232 "int8" `162 
f B "rotate_left" 1 232 "void(*int8 address,int8 bytes)" `160 
v L "address" 1 233 "*int8" `164 
v L "bytes" 1 233 "int8" `165 
f B "rotate_right" 1 233 "void(*int8 address,int8 bytes)" `163 
v L "value" 1 234 "int8" `167 
f B "swap" 1 234 "void(int8 value)" `166 
v L "var" 1 235 "int16" `169 
v L "offset" 1 235 "int8" `170 
f B "make8" 1 235 "int8(int16 var,int8 offset)" `168 
v L "var" 1 236 "int32" `169 
v L "offset" 1 236 "int8" `173 
f G "make8" 1 236 "int8(int32 var,int8 offset)" `171 
v L "varhigh" 1 237 "int8" `175 
v L "varlow" 1 237 "int8" `176 
f B "make16" 1 237 "int16(int8 varhigh,int8 varlow)" `174 
v L "var1" 1 238 "int16" `178 
f B "make32" 1 238 "int32(int16 var1)" `177 
v L "var1" 1 239 "int16" `180 
v L "var2" 1 239 "int16" `181 
f G "make32" 1 239 "int32(int16 var1,int16 var2)" `179 
v L "var1" 1 240 "int16" `180 
v L "var2" 1 240 "int8" `184 
f G "make32" 1 240 "int32(int16 var1,int8 var2)" `182 
v L "var1" 1 241 "int16" `186 
v L "var2" 1 241 "int8" `187 
v L "var3" 1 241 "int8" `188 
f G "make32" 1 241 "int32(int16 var1,int8 var2,int8 var3)" `185 
v L "var1" 1 242 "int8" `190 
f G "make32" 1 242 "int32(int8 var1)" `189 
v L "var1" 1 243 "int8" `180 
v L "var2" 1 243 "int8" `193 
f G "make32" 1 243 "int32(int8 var1,int8 var2)" `191 
v L "var1" 1 244 "int8" `186 
v L "var2" 1 244 "int8" `187 
v L "var3" 1 244 "int8" `197 
f G "make32" 1 244 "int32(int8 var1,int8 var2,int8 var3)" `194 
v L "var1" 1 245 "int8" `199 
v L "var2" 1 245 "int8" `200 
v L "var3" 1 245 "int8" `201 
v L "var4" 1 245 "int8" `202 
f G "make32" 1 245 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `198 
v L "var1" 1 246 "int8" `180 
v L "var2" 1 246 "int16" `205 
f G "make32" 1 246 "int32(int8 var1,int16 var2)" `203 
v L "var1" 1 247 "int8" `186 
v L "var2" 1 247 "int16" `187 
v L "var3" 1 247 "int8" `209 
f G "make32" 1 247 "int32(int8 var1,int16 var2,int8 var3)" `206 
v L "var1" 1 248 "int8" `186 
v L "var2" 1 248 "int8" `187 
v L "var3" 1 248 "int16" `213 
f G "make32" 1 248 "int32(int8 var1,int8 var2,int16 var3)" `210 
v L "var" 1 249 "int8" `215 
v L "bit" 1 249 "int8" `216 
f B "bit_set" 1 249 "void(int8 var,int8 bit)" `214 
v L "var" 1 250 "int16" `215 
v L "bit" 1 250 "int8" `219 
f G "bit_set" 1 250 "void(int16 var,int8 bit)" `217 
v L "var" 1 251 "int32" `215 
v L "bit" 1 251 "int8" `222 
f G "bit_set" 1 251 "void(int32 var,int8 bit)" `220 
v L "var" 1 252 "int8" `224 
v L "bit" 1 252 "int8" `225 
f B "bit_clear" 1 252 "void(int8 var,int8 bit)" `223 
v L "var" 1 253 "int16" `224 
v L "bit" 1 253 "int8" `228 
f G "bit_clear" 1 253 "void(int16 var,int8 bit)" `226 
v L "var" 1 254 "int32" `224 
v L "bit" 1 254 "int8" `231 
f G "bit_clear" 1 254 "void(int32 var,int8 bit)" `229 
v L "var" 1 255 "int8" `233 
v L "bit" 1 255 "int8" `234 
f B "bit_test" 1 255 "int8(int8 var,int8 bit)" `232 
v L "var" 1 256 "int16" `233 
v L "bit" 1 256 "int8" `237 
f G "bit_test" 1 256 "int8(int16 var,int8 bit)" `235 
v L "var" 1 257 "int32" `233 
v L "bit" 1 257 "int8" `240 
f G "bit_test" 1 257 "int8(int32 var,int8 bit)" `238  "#use delay() Prototypes:"
v L "count" 1 260 "int8" `242 
f B "delay_cycles" 1 260 "void(int8 count)" `241 
v L "time" 1 261 "int16" `244 
f B "delay_ms" 1 261 "void(int16 time)" `243 
v L "time" 1 262 "int16" `246 
f B "delay_us" 1 262 "void(int16 time)" `245  "#use rs232() Prototypes:"
v L "cdata" 1 265 "int8" `248 
f B "putchar" 1 265 "void(int8 cdata)" `247 
v L "cdata" 1 266 "int8" `250 
v L "stream" 1 266 "int8" `251 
f G "putchar" 1 266 "void(int8 cdata,int8 stream)" `249 
v L "string" 1 267 "*int8" `253 
f B "puts" 1 267 "void(*int8 string)" `252 
v L "string" 1 268 "*int8" `255 
v L "stream" 1 268 "int8" `256 
f G "puts" 1 268 "void(*int8 string,int8 stream)" `254 
f B "getch" 1 269 "int8()" `257 
v L "stream" 1 270 "int8" `259 
f G "getch" 1 270 "int8(int8 stream)" `258 
v L "string" 1 271 "*int8" `261 
f B "gets" 1 271 "void(*int8 string)" `260 
v L "string" 1 272 "*int8" `263 
v L "stream" 1 272 "int8" `264 
f G "gets" 1 272 "void(*int8 string,int8 stream)" `262 
f B "kbhit" 1 273 "int8()" `265 
v L "stream" 1 274 "int8" `267 
f G "kbhit" 1 274 "int8(int8 stream)" `266 
v L "string" 1 275 "*int8" `269 
f B "printf" 1 275 "void(*int8 string,*int8 _VA_LIST)" `268 
v L "stream" 1 276 "int8" `272 
v L "string" 1 276 "*int8" `273 
f B "fprintf" 1 276 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `271 
f B "putc_send" 1 277 "void()" `275 
v L "stream" 1 278 "int8" `277 
f B "fputc_send" 1 278 "void(int8 stream)" `276 
f B "rcv_buffer_full" 1 279 "int8()" `278 
v L "stream" 1 280 "int8" `280 
f G "rcv_buffer_full" 1 280 "int8(int8 stream)" `279 
f B "rcv_buffer_bytes" 1 281 "int16()" `281 
v L "stream" 1 282 "int8" `283 
f G "rcv_buffer_bytes" 1 282 "int16(int8 stream)" `282 
f B "tx_buffer_full" 1 283 "int8()" `284 
v L "stream" 1 284 "int8" `286 
f G "tx_buffer_full" 1 284 "int8(int8 stream)" `285 
f B "tx_buffer_bytes" 1 285 "int16()" `287 
v L "stream" 1 286 "int8" `289 
f G "tx_buffer_bytes" 1 286 "int16(int8 stream)" `288  "#use i2c() Prototypes:"
f B "i2c_read" 1 289 "int8()" `290 
v L "stream" 1 290 "int8" `292 
f G "i2c_read" 1 290 "int8(int8 stream)" `291 
v L "stream" 1 291 "int8" `294 
v L "ack" 1 291 "int8" `295 
f G "i2c_read" 1 291 "int8(int8 stream,int8 ack)" `293 
v L "data" 1 292 "int8" `297 
f B "i2c_write" 1 292 "int8(int8 data)" `296 
v L "stream" 1 293 "int8" `299 
v L "data" 1 293 "int8" `300 
f G "i2c_write" 1 293 "int8(int8 stream,int8 data)" `298 
f B "i2c_start" 1 294 "void()" `301 
v L "stream" 1 295 "int8" `303 
f G "i2c_start" 1 295 "void(int8 stream)" `302 
v L "stream" 1 296 "int8" `305 
v L "restart" 1 296 "int8" `306 
f G "i2c_start" 1 296 "void(int8 stream,int8 restart)" `304 
f B "i2c_stop" 1 297 "void()" `307 
v L "stream" 1 298 "int8" `309 
f G "i2c_stop" 1 298 "void(int8 stream)" `308 
f B "i2c_isr_state" 1 299 "int8()" `310 
v L "addr" 1 300 "int8" `312 
f B "i2c_slaveaddr" 1 300 "void(int8 addr)" `311 
v L "stream" 1 301 "int8" `314 
v L "addr" 1 301 "int8" `315 
f G "i2c_slaveaddr" 1 301 "void(int8 stream,int8 addr)" `313 
f B "i2c_poll" 1 302 "int8()" `316 
v L "stream" 1 303 "int8" `318 
f G "i2c_poll" 1 303 "int8(int8 stream)" `317 
v L "baud" 1 304 "int32" `320 
f B "i2c_init" 1 304 "void(int32 baud)" `319 
v L "stream" 1 305 "int8" `322 
v L "baud" 1 305 "int32" `323 
f G "i2c_init" 1 305 "void(int8 stream,int32 baud)" `321  "#use spi() Prototypes:"
f B "spi_xfer" 1 308 "int8()" `324 
f G "spi_xfer" 1 309 "int16()" `325 
f G "spi_xfer" 1 310 "int32()" `326 
v L "data" 1 311 "int8" `328 
f G "spi_xfer" 1 311 "int8(int8 data)" `327 
v L "data" 1 312 "int16" `330 
f G "spi_xfer" 1 312 "int16(int16 data)" `329 
v L "data" 1 313 "int32" `332 
f G "spi_xfer" 1 313 "int32(int32 data)" `331 
v L "stream" 1 314 "int8" `334 
v L "data" 1 314 "int8" `335 
f G "spi_xfer" 1 314 "int8(int8 stream,int8 data)" `333 
v L "stream" 1 315 "int8" `334 
v L "data" 1 315 "int16" `338 
f G "spi_xfer" 1 315 "int16(int8 stream,int16 data)" `336 
v L "stream" 1 316 "int8" `334 
v L "data" 1 316 "int32" `341 
f G "spi_xfer" 1 316 "int32(int8 stream,int32 data)" `339 
v L "stream" 1 317 "int8" `343 
v L "data" 1 317 "int8" `344 
v L "bits" 1 317 "int8" `345 
f G "spi_xfer" 1 317 "int8(int8 stream,int8 data,int8 bits)" `342 
v L "stream" 1 318 "int8" `343 
v L "data" 1 318 "int16" `344 
v L "bits" 1 318 "int8" `349 
f G "spi_xfer" 1 318 "int16(int8 stream,int16 data,int8 bits)" `346 
v L "stream" 1 319 "int8" `343 
v L "data" 1 319 "int32" `344 
v L "bits" 1 319 "int8" `353 
f G "spi_xfer" 1 319 "int32(int8 stream,int32 data,int8 bits)" `350 
v L "baud" 1 320 "int32" `355 
f B "spi_init" 1 320 "void(int32 baud)" `354 
v L "stream" 1 321 "int8" `357 
v L "baud" 1 321 "int32" `358 
f G "spi_init" 1 321 "void(int8 stream,int32 baud)" `356 
v L "baud" 1 322 "int32" `360 
f B "spi_speed" 1 322 "void(int32 baud)" `359 
v L "stream" 1 323 "int8" `362 
v L "baud" 1 323 "int32" `363 
f G "spi_speed" 1 323 "void(int8 stream,int32 baud)" `361 
v L "stream" 1 324 "int8" `365 
v L "baud" 1 324 "int32" `366 
v L "clock" 1 324 "int32" `367 
f G "spi_speed" 1 324 "void(int8 stream,int32 baud,int32 clock)" `364 
v L "data" 1 325 "int8" `369 
f B "spi_prewrite" 1 325 "void(int8 data)" `368 
v L "data" 1 326 "int16" `371 
f G "spi_prewrite" 1 326 "void(int16 data)" `370 
v L "data" 1 327 "int32" `373 
f G "spi_prewrite" 1 327 "void(int32 data)" `372 
v L "??65535" 1 328 "int8" `375 
v L "data" 1 328 "int8" `376 
f G "spi_prewrite" 1 328 "void(int8 ,int8 data)" `374 
v L "??65535" 1 329 "int8" `375 
v L "data" 1 329 "int16" `379 
f G "spi_prewrite" 1 329 "void(int8 ,int16 data)" `377 
v L "??65535" 1 330 "int8" `375 
v L "data" 1 330 "int32" `382 
f G "spi_prewrite" 1 330 "void(int8 ,int32 data)" `380 
f B "spi_xfer_in" 1 331 "int8()" `383 
f G "spi_xfer_in" 1 332 "int16()" `384 
f G "spi_xfer_in" 1 333 "int32()" `385 
v L "bits" 1 334 "int8" `387 
f G "spi_xfer_in" 1 334 "int8(int8 bits)" `386 
v L "bits" 1 335 "int8" `389 
f G "spi_xfer_in" 1 335 "int16(int8 bits)" `388 
v L "bits" 1 336 "int8" `391 
f G "spi_xfer_in" 1 336 "int32(int8 bits)" `390 
v L "stream" 1 337 "int8" `393 
v L "bits" 1 337 "int8" `394 
f G "spi_xfer_in" 1 337 "int8(int8 stream,int8 bits)" `392 
v L "stream" 1 338 "int8" `393 
v L "bits" 1 338 "int8" `397 
f G "spi_xfer_in" 1 338 "int16(int8 stream,int8 bits)" `395 
v L "stream" 1 339 "int8" `393 
v L "bits" 1 339 "int8" `400 
f G "spi_xfer_in" 1 339 "int32(int8 stream,int8 bits)" `398  "#use rtos() Prototypes:"
f B "rtos_run" 1 342 "void()" `401 
f B "rtos_yield" 1 343 "void()" `402 
v L "task" 1 344 "int8" `404 
f B "rtos_enable" 1 344 "void(int8 task)" `403 
v L "task" 1 345 "int8" `406 
f B "rtos_disable" 1 345 "void(int8 task)" `405 
f B "rtos_terminate" 1 346 "void()" `407 
v L "flag" 1 347 "int8" `409 
f B "rtos_await" 1 347 "void(int8 flag)" `408 
v L "sem" 1 348 "int8" `411 
f B "rtos_wait" 1 348 "void(int8 sem)" `410 
v L "sem" 1 349 "int8" `413 
f B "rtos_signal" 1 349 "void(int8 sem)" `412 
v L "task" 1 350 "int8" `415 
v L "msg" 1 350 "int8" `416 
f B "rtos_msg_send" 1 350 "void(int8 task,int8 msg)" `414 
f B "rtos_msg_read" 1 351 "int8()" `417 
f B "rtos_msg_poll" 1 352 "int8()" `418 
v L "task" 1 353 "int8" `420 
f B "rtos_overrun" 1 353 "int8(int8 task)" `419 
v L "task" 1 354 "int8" `422 
v L "stat" 1 354 "*int8" `423 
f B "rtos_stats" 1 354 "void(int8 task,*int8 stat)" `421  "#use timer() Prototypes:"
f B "get_ticks" 1 357 "int8()" `424 
f G "get_ticks" 1 358 "int16()" `425 
f G "get_ticks" 1 359 "int32()" `426 
v L "stream" 1 360 "int8" `428 
f G "get_ticks" 1 360 "int8(int8 stream)" `427 
v L "stream" 1 361 "int8" `430 
f G "get_ticks" 1 361 "int16(int8 stream)" `429 
v L "stream" 1 362 "int8" `432 
f G "get_ticks" 1 362 "int32(int8 stream)" `431 
v L "value" 1 363 "int8" `434 
f B "set_ticks" 1 363 "void(int8 value)" `433 
v L "value" 1 364 "int16" `436 
f G "set_ticks" 1 364 "void(int16 value)" `435 
v L "value" 1 365 "int32" `438 
f G "set_ticks" 1 365 "void(int32 value)" `437 
v L "stream" 1 366 "int8" `440 
v L "value" 1 366 "int8" `441 
f G "set_ticks" 1 366 "void(int8 stream,int8 value)" `439 
v L "stream" 1 367 "int8" `440 
v L "value" 1 367 "int16" `444 
f G "set_ticks" 1 367 "void(int8 stream,int16 value)" `442 
v L "stream" 1 368 "int8" `440 
v L "value" 1 368 "int32" `447 
f G "set_ticks" 1 368 "void(int8 stream,int32 value)" `445  "#use pwm() Prototypes:"
f B "pwm_on" 1 371 "void()" `448 
v L "stream" 1 372 "int8" `450 
f G "pwm_on" 1 372 "void(int8 stream)" `449 
f B "pwm_off" 1 373 "void()" `451 
v L "stream" 1 374 "int8" `453 
f G "pwm_off" 1 374 "void(int8 stream)" `452 
v L "duty" 1 375 "int16" `455 
f B "pwm_set_duty" 1 375 "void(int16 duty)" `454 
v L "stream" 1 376 "int8" `457 
v L "duty" 1 376 "int16" `458 
f G "pwm_set_duty" 1 376 "void(int8 stream,int16 duty)" `456 
v L "percent" 1 377 "int16" `460 
f B "pwm_set_duty_percent" 1 377 "void(int16 percent)" `459 
v L "stream" 1 378 "int8" `462 
v L "percent" 1 378 "int16" `463 
f G "pwm_set_duty_percent" 1 378 "void(int8 stream,int16 percent)" `461 
v L "frequency" 1 379 "int32" `465 
f B "pwm_set_frequency" 1 379 "void(int32 frequency)" `464 
v L "stream" 1 380 "int8" `467 
v L "frequency" 1 380 "int32" `468 
f G "pwm_set_frequency" 1 380 "void(int8 stream,int32 frequency)" `466  "#use capture() Prototypes:"
f B "get_capture_time" 1 383 "int16()" `469 
v L "stream" 1 384 "int8" `471 
f G "get_capture_time" 1 384 "int16(int8 stream)" `470 
f B "get_capture_event" 1 385 "int8()" `472 
v L "stream" 1 386 "int8" `474 
f G "get_capture_event" 1 386 "int8(int8 stream)" `473  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 399 "int16" `476 
f B "goto_address" 1 399 "void(int16 address)" `475 
v L "label" 1 400 "int16" `478 
f B "label_address" 1 400 "int16(int16 label)" `477  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 407 "int8" `479 
v L "address" 1 410 "__EEADDRESS__" `481 
f B "read_eeprom" 1 410 "int8(__EEADDRESS__ address)" `480 
v L "address" 1 411 "__EEADDRESS__" `483 
v L "value" 1 411 "int8" `484 
f B "write_eeprom" 1 411 "void(__EEADDRESS__ address,int8 value)" `482  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
v L "interrupt" 1 418 "int32" `486 
f B "enable_interrupts" 1 418 "void(int32 interrupt)" `485 
v L "interrupt" 1 419 "int32" `488 
f B "disable_interrupts" 1 419 "void(int32 interrupt)" `487 
v L "interrupt" 1 420 "int32" `490 
f B "clear_interrupt" 1 420 "void(int32 interrupt)" `489 
v L "interrupt" 1 421 "int32" `492 
f B "interrupt_active" 1 421 "int8(int32 interrupt)" `491 
v L "interrupt" 1 422 "int32" `494 
f B "interrupt_enabled" 1 422 "int8(int32 interrupt)" `493 
v L "source" 1 423 "int8" `496 
v L "edge" 1 423 "int8" `497 
f B "ext_int_edge" 1 423 "void(int8 source,int8 edge)" `495 
v L "address" 1 424 "int16" `499 
f B "jump_to_irs" 1 424 "void(int16 address)" `498  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 426 "0x40"
d G "H_TO_L" 1 427 "0"
d G "GLOBAL" 1 429 "0x0BC0"
d G "PERIPH" 1 430 "0x0B40"
d G "INT_RTCC" 1 431 "0x000B20"
d G "INT_EXT_L2H" 1 432 "0x50000B10"
d G "INT_EXT_H2L" 1 433 "0x60000B10"
d G "INT_EXT" 1 434 "0x000B10"
d G "INT_TIMER1" 1 435 "0x008C01"
d G "INT_TIMER0" 1 436 "0x000B20"
d G "INT_EEPROM" 1 437 "0x008C80"
d G "INT_COMP" 1 438 "0x008C08"
d G "INT_RA" 1 439 "0x00FF0B08"
d G "INT_RA0" 1 440 "0x0010B08"
d G "INT_RA1" 1 441 "0x0020B08"
d G "INT_RA2" 1 442 "0x0040B08"
d G "INT_RA3" 1 443 "0x0080B08"
d G "INT_RA4" 1 444 "0x0100B08"
d G "INT_RA5" 1 445 "0x0200B08"
D G "Device_SDA" 0 8 "PIN_A0"
D G "Device_SCL" 0 9 "PIN_A1"
D G "CLIP_DET" 0 11 "PIN_A4"
D G "WRT" 0 15 "0xFE;"
D G "RD" 0 16 "0x01;"
D G "TIMEOFF" 0 18 "50" "base 10ms"
V G "AMP_ADD" 0 20 "int8" `508 
C L "jump_to_irs" 0 7 1 "FUNCTION"
f G "StartUp_amp" 0 25 "int8()" `509  ""
F G "main" 0 28 "void()" `510  "ext_int_edge(L_TO_H);      // init interrupt triggering for button press"
C L "main" 0 7 2 "FUNCTION"
F G "StartUp_amp" 0 43 "int8()" `509 
C L "StartUp_amp" 0 7 1 "FUNCTION"
C L "StartUp_amp" 0 7 1 "FUNCTION"
C L "StartUp_amp" 0 7 1 "FUNCTION"
C L "StartUp_amp" 0 7 1 "FUNCTION"
C L "StartUp_amp" 0 7 7 "FUNCTION"
C L "StartUp_amp" 0 7 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "input_a" 0 0
F B "set_tris_a" 1 0
F B "get_tris_a" 0 0
F B "input_change_a" 0 0
F B "port_a_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
